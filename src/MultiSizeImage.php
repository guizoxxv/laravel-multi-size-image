<?php

namespace Guizoxxv\LaravelMultiSizeImage;

use Exception;
use Intervention\Image\Facades\Image as ImageFacade;
use Intervention\Image\Image;
use Spatie\ImageOptimizer\OptimizerChain;
use Spatie\ImageOptimizer\Optimizers\Jpegoptim;
use Spatie\ImageOptimizer\Optimizers\Pngquant;
use Spatie\ImageOptimizer\Optimizers\Optipng;

class MultiSizeImage {

    private $optimizerChain;
    private $autoGeneratedName;

    public function __construct(?OptimizerChain $optimizerChain = null) {
        if ($optimizerChain) {
            $this->optimizerChain = $optimizerChain;
        } else {
            if (config('multiSizeImage.optimize')) {
                $this->optimizerChain = (new OptimizerChain)
                    ->addOptimizer(new Jpegoptim([
                        '-m85',
                        '--strip-all',
                        '--all-progressive',
                    ]))
                    ->addOptimizer(new Pngquant([
                        '--force',
                    ]))
                    ->addOptimizer(new Optipng([
                        '-i0',
                        '-o2',
                        '-quiet',
                    ]));
            }
        }
    }

    public function processImage(
        string $filePath,
        ?string $outputPath = null,
        ?string $basePath = '',
        ?string $fileName = null
    ): ?array
    {
        $resizedFilesPaths = [];

        try {
            // Ignore file if mime type does not match defined
            if (
                !in_array(
                    mime_content_type($filePath),
                    config('multiSizeImage.mime_types')
                )
            ) {
                return null;
            }

            // Set file name if not specified
            if (!$fileName) {
                // Keep original file name or generate a new one
                $fileName = config('multiSizeImage.keep_original_name')
                    ? pathinfo($filePath, PATHINFO_FILENAME)
                    : uniqid();
            }
            
            // Make a new image version for each size defined
            foreach(config('multiSizeImage.sizes') as $size => $sizeValue) {
                // Create a Intervention image instance
                $img = ImageFacade::make($filePath);

                // Resize image
                $resizedFilePath = $this->resizeImage(
                    $img,
                    $size,
                    $sizeValue,
                    $fileName,
                    rtrim($outputPath, '/'),
                    rtrim($basePath, '/')
                );

                // Get pathinfo
                $resizedFilePathInfo = pathinfo($resizedFilePath);

                // Add file full path to array to check if original can be deleted later
                array_push(
                    $resizedFilesPaths,
                    $resizedFilePathInfo['dirname'] . '/' . $resizedFilePathInfo['basename']
                );

                // Optimize if enabled
                if ($this->optimizerChain !== null) {
                    $this->optimizerChain->optimize($resizedFilePath);
                }
            }

            // Check if original image can be deleted
            if (
                !config('multiSizeImage.keep_original_file')
                && !in_array($filePath, $resizedFilesPaths)
            ) {
                // Delete original image
                unlink($filePath);

                if ($outputPath !== null) {
                    // Delete remaining folder if empty
                    $this->deleteFolderIfEmpty(pathinfo($filePath, PATHINFO_DIRNAME));
                }
            }

            return $resizedFilesPaths;
        } catch (Exception $e) {
            throw $e;
        }
    }

    private function resizeImage(
        Image $img,
        string $size,
        int $sizeValue,
        string $fileName,
        ?string $outputPath,
        ?string $basePath
    ): string
    {
        // Resize if width or height is above size
        if (max([$img->width(), $img->height()]) > $sizeValue) {
            if ($img->width() >= $img->height()) {
                // Resize by width
                $img->resize($sizeValue , null, function ($constraint) {
                    $constraint->aspectRatio(); // maintain aspect ration
                    $constraint->upsize(); // prevent upsizing
                });
            } else {
                // Resize by height
                $img->resize(null, $sizeValue, function ($constraint) {
                    $constraint->aspectRatio(); // maintain aspect ration
                    $constraint->upsize(); // prevent upsizing
                });
            }   
        }

        $fileName = $fileName . "@{$size}.{$img->extension}";
        
        if ($outputPath) {
            if ($basePath) {
                // Get image dir relative to basePath
                $prefix = preg_quote($basePath, '/');
                $fileDir = preg_replace("/^{$prefix}/", '', $img->dirname);

                // Set output file path based on specified path and base path
                $outputFilePath = "{$outputPath}/{$fileDir}/{$fileName}";
            } else {
                // Set output file path based on specified path
                $outputFilePath = "{$outputPath}/{$fileName}";
            }

            // Create folder if it does not already exists
            $this->createFolderIfNotExists(pathinfo($outputFilePath, PATHINFO_DIRNAME));         
        } else {
            // Set output file path based on original path
            $outputFilePath = "{$img->dirname}/{$fileName}";
        }

        // Save resized image to output path
        $img->save($outputFilePath);

        return $outputFilePath;
    }

    private function createFolderIfNotExists(string $dirname): void
    {
        // Check if path exists
        if (!file_exists($dirname)) {
            // Create folder with 755 permission
            mkdir($dirname, 0755, true);
        }
    }

    private function deleteFolderIfEmpty($dirname): void
    {
        // Count remaining items
        $filesCount = count(array_slice(scandir($dirname), 2));
        
        if ($filesCount === 0) {
            rmdir($dirname);
        }
    }

}